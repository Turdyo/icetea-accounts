datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Compte {
  id String @id @default(cuid())

  login         String
  name          String
  password      String
  tier          Tier     @default(Unranked)
  rank          Rank?
  lastTimeTaken DateTime @default(now())

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String
}

// authjs
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  role UserRole @default(random)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Compte    Compte[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Tier {
  Unranked
  Iron
  Bronze
  Silver
  Gold
  Platinium
  Emerald
  Diamond
  Master
  Grandmaster
  Challenger
}

enum Rank {
  I
  II
  III
  IV
}

enum UserRole {
  random
  approved
}
